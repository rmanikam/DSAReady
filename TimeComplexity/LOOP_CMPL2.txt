What is the time complexity of the following code :

int i, j, k = 0;
for (i = n/2; i <= n; i++) {
    for (j = 2; j <= n; j = j * 2) {
         k = k + n/2;
    }
}


Outer Loop Analysis:
The outer loop runs from i=n/2 to i=n. This means that the outer loop will iterate 
n−n/2 times, which is n/2 iterations.
Therefore, the outer loop runs O(n/2) = O(n) times.
Inner Loop Analysis:
The inner loop runs from 
j=2 to j≤n, doubling j at each iteration.
Since j is multiplied by 2 in each iteration, this loop runs O(logn) times 
(because the value of j grows exponentially).
Overall Time Complexity:
The outer loop runs O(n) times.
For each iteration of the outer loop, the inner loop runs O(log n) times.
Thus, the overall time complexity is:
O(n)×O(logn)=O(nlogn)
Conclusion:
The time complexity of the given code is O(nlogn), not 

O(n2).

The confusion may have come from thinking that both loops run linearly, but since the inner
 loop grows logarithmically due to the multiplication of j by 2, the complexity is O(nlogn).

 